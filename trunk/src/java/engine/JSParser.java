/* The following code was generated by JFlex 1.4.3 on 22/05/12 16.43 */
package engine;
import java_cup.runtime.Symbol;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/05/12 16.43 from the specification file
 * <tt>/Users/francescomilone/Dropbox/[Eclipse][Reti] Workspace/BBParser/src/cool.lex</tt>
 */
class JSParser implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYEVENT = 4;
  public static final int YYINITIAL = 0;
  public static final int YYFUNC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\45\2\0\1\15\22\0\1\11\1\0\1\44\1\0\1\16"+
    "\3\0\1\1\1\12\2\0\1\16\1\0\1\0\1\24\1\16\1\16"+
    "\10\16\1\0\1\0\1\17\1\43\1\23\2\0\1\25\1\33\1\5"+
    "\1\27\1\35\1\2\1\41\1\30\1\7\1\14\1\32\1\31\1\34"+
    "\1\4\1\10\1\22\1\14\1\21\1\20\1\6\1\3\1\36\1\37"+
    "\1\42\1\26\1\40\1\0\1\0\1\0\1\0\1\14\1\0\1\25"+
    "\1\33\1\5\1\27\1\35\1\2\1\41\1\30\1\7\1\14\1\32"+
    "\1\31\1\34\1\4\1\10\1\22\1\14\1\21\1\20\1\6\1\3"+
    "\1\36\1\37\1\42\1\26\1\40\1\13\1\0\1\46\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\14\1\1\2\2\1\1\3\1\4\1\5\6\0"+
    "\1\2\146\0\1\6\14\0\1\7\5\0\1\10\7\0"+
    "\1\11\11\0\1\12\4\0\1\13\5\0\1\14\4\0"+
    "\1\15\1\0\1\16\1\17\1\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\165\0\165\0\165\0\234\0\303\0\u02be"+
    "\0\u02e5\0\u030c\0\u0333\0\165\0\u035a\0\u0381\0\u03a8\0\u03cf"+
    "\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492\0\u0270\0\u0297\0\u04b9"+
    "\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1"+
    "\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729"+
    "\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861"+
    "\0\u0888\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999"+
    "\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1"+
    "\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09"+
    "\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41"+
    "\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79"+
    "\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1"+
    "\0\u0fd8\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2\0\u10e9"+
    "\0\u1110\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa\0\u1221"+
    "\0\u1248\0\u126f\0\165\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332"+
    "\0\u1359\0\u1380\0\u13a7\0\u13ce\0\u13f5\0\u141c\0\u1443\0\165"+
    "\0\u146a\0\u1491\0\u14b8\0\u14df\0\u1506\0\165\0\u152d\0\u1554"+
    "\0\u157b\0\u15a2\0\u15c9\0\u15f0\0\u1617\0\165\0\u163e\0\u1665"+
    "\0\u168c\0\u16b3\0\u16da\0\u1701\0\u1728\0\u174f\0\u1776\0\165"+
    "\0\u179d\0\u17c4\0\u17eb\0\u1812\0\165\0\u1839\0\u1860\0\u1887"+
    "\0\u18ae\0\u18d5\0\165\0\u18fc\0\u1923\0\u194a\0\u1971\0\165"+
    "\0\u1998\0\165\0\165\0\165";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\2\4\1\7\2\4\1\10\4\4"+
    "\1\11\1\4\1\12\1\13\1\14\3\4\1\15\5\4"+
    "\1\16\1\17\10\4\1\20\2\4\1\21\1\22\10\4"+
    "\1\23\1\4\1\11\27\4\1\20\1\24\15\4\1\11"+
    "\26\4\1\25\1\20\1\4\50\0\1\26\1\27\47\0"+
    "\1\30\51\0\1\31\22\0\1\32\21\0\1\33\107\0"+
    "\1\34\21\0\1\35\3\0\1\36\3\0\1\37\23\0"+
    "\1\40\22\0\1\41\53\0\1\42\42\0\1\43\20\0"+
    "\1\44\100\0\1\45\26\0\1\34\32\0\1\46\1\47"+
    "\47\0\1\50\47\0\1\51\63\0\1\52\34\0\1\53"+
    "\41\0\1\54\1\55\1\0\1\56\12\0\1\57\1\60"+
    "\3\0\1\61\1\0\1\62\1\0\1\63\1\64\1\65"+
    "\1\66\1\67\16\0\1\70\61\0\1\71\63\0\1\72"+
    "\32\0\1\73\34\0\1\74\70\0\1\75\23\0\1\76"+
    "\46\0\1\77\46\0\1\100\44\0\1\101\47\0\1\102"+
    "\72\0\1\76\52\0\1\103\21\0\1\104\42\0\1\105"+
    "\72\0\1\106\1\107\20\0\1\110\1\0\1\111\27\0"+
    "\1\112\46\0\1\113\44\0\1\114\46\0\1\115\23\0"+
    "\1\116\73\0\1\117\42\0\1\120\25\0\1\121\57\0"+
    "\1\122\46\0\1\123\32\0\1\124\66\0\1\125\56\0"+
    "\1\126\13\0\1\43\71\0\1\127\53\0\1\130\24\0"+
    "\1\131\63\0\1\76\26\0\1\132\47\0\1\133\44\0"+
    "\1\134\47\0\1\135\72\0\1\63\42\0\1\136\30\0"+
    "\1\137\72\0\1\140\34\0\1\141\56\0\1\142\35\0"+
    "\1\143\36\0\1\144\43\0\1\145\66\0\1\146\47\0"+
    "\1\147\23\0\1\150\46\0\1\151\64\0\1\152\34\0"+
    "\1\153\60\0\1\154\54\0\1\155\54\0\1\156\17\0"+
    "\1\157\75\0\1\160\15\0\1\161\50\0\1\162\47\0"+
    "\1\163\45\0\1\164\43\0\1\165\47\0\1\166\47\0"+
    "\1\167\75\0\1\170\22\0\1\171\73\0\1\172\20\0"+
    "\1\173\25\0\1\174\32\0\1\174\56\0\1\107\44\0"+
    "\1\161\22\0\1\175\16\0\1\176\4\0\1\177\40\0"+
    "\1\161\45\0\1\200\36\0\1\150\60\0\1\201\33\0"+
    "\1\202\37\0\23\155\1\203\23\155\4\0\1\164\77\0"+
    "\1\204\37\0\1\161\63\0\1\205\12\0\1\206\47\0"+
    "\1\207\64\0\1\161\13\0\1\210\1\205\23\0\1\161"+
    "\67\0\1\211\37\0\1\161\23\0\1\174\70\0\1\161"+
    "\22\0\1\174\101\0\1\211\14\0\1\161\62\0\1\161"+
    "\45\0\1\212\35\0\1\213\73\0\1\214\17\0\1\215"+
    "\62\0\1\216\53\0\1\217\63\0\1\220\12\0\1\221"+
    "\42\0\1\222\70\0\1\161\14\0\1\205\40\0\1\161"+
    "\46\0\1\223\50\0\1\131\12\0\1\175\4\0\1\224"+
    "\16\0\1\177\4\0\1\225\12\0\23\215\1\226\23\215"+
    "\6\0\1\227\46\0\1\230\44\0\1\231\43\0\1\232"+
    "\7\0\1\233\3\0\1\233\27\0\1\233\21\0\1\165"+
    "\31\0\1\174\32\0\1\234\20\0\1\235\61\0\1\236"+
    "\50\0\1\237\22\0\1\240\7\0\1\241\3\0\1\241"+
    "\27\0\1\241\3\0\10\232\1\242\1\0\1\232\1\0"+
    "\1\232\1\0\3\232\2\0\16\232\5\0\1\232\7\243"+
    "\1\233\2\0\1\243\1\233\2\0\3\243\2\0\16\243"+
    "\2\0\1\233\36\0\1\150\47\0\1\211\31\0\1\244"+
    "\27\0\10\245\1\246\1\0\1\245\1\0\1\245\1\0"+
    "\3\245\2\0\16\245\5\0\1\240\7\247\1\241\2\0"+
    "\1\247\1\241\2\0\3\247\2\0\16\247\2\0\1\241"+
    "\12\0\1\242\1\0\1\250\1\0\1\242\27\0\1\242"+
    "\2\0\1\251\7\243\1\252\2\0\2\243\2\0\3\243"+
    "\2\0\16\243\2\0\1\243\42\0\1\253\7\0\10\245"+
    "\1\254\1\0\1\245\1\0\1\245\1\0\3\245\2\0"+
    "\16\245\15\0\1\246\1\0\1\255\1\0\1\246\27\0"+
    "\1\246\2\0\1\256\7\247\1\257\2\0\2\247\2\0"+
    "\3\247\2\0\16\247\2\0\1\247\3\0\10\260\1\261"+
    "\1\0\1\260\1\0\1\260\1\0\3\260\2\0\16\260"+
    "\5\0\1\262\7\0\1\252\3\0\1\252\27\0\1\252"+
    "\36\0\1\174\22\0\1\254\1\0\1\263\1\0\1\254"+
    "\27\0\1\254\3\0\10\264\1\265\1\0\1\264\1\0"+
    "\1\264\1\0\3\264\2\0\16\264\5\0\1\266\7\0"+
    "\1\257\3\0\1\257\27\0\1\257\3\0\10\260\1\267"+
    "\1\0\1\260\1\0\1\260\1\0\3\260\2\0\16\260"+
    "\15\0\1\261\1\0\1\270\1\0\1\261\27\0\1\261"+
    "\13\0\1\261\36\0\10\264\1\271\1\0\1\264\1\0"+
    "\1\264\1\0\3\264\2\0\16\264\15\0\1\265\1\0"+
    "\1\272\1\0\1\265\27\0\1\265\13\0\1\265\45\0"+
    "\1\267\1\0\1\273\1\0\1\267\27\0\1\267\12\0"+
    "\1\271\1\0\1\274\1\0\1\271\27\0\1\271\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6591];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\16\1\3\11\6\0\1\11\146\0\1\11"+
    "\14\0\1\11\5\0\1\11\7\0\1\11\11\0\1\11"+
    "\4\0\1\11\5\0\1\11\4\0\1\11\1\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

	private String head;

    // Max size of string constants
    static int MAX_STR_CONST = 1024;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();

    private int curr_lineno = 1;
    int get_curr_lineno() {
	return curr_lineno;
    }
    
    private String time;
     void set_request_time(String rtime) {
		time = rtime;
		
	head="<style type=\"text/css\">" +
  		"body{font: 76%/1.3 Arial,Verdana,sans-serif}\n" +
  		"div.box{margin-left:25%; width:800px !important;width /**/:800px;\n" +
  		"max-height: 220px;\n" +
  		" overflow:scroll;\n" +
  		"overflow:auto;padding: 4px;\n" +
  		"border:1px solid #EEE;border-right:0 solid;\n" +
  		"background:url(gradient.png) repeat-x fixed top left}\n" +
  		"div.box2{width:780px !important;width /**/:780px;\n" +
  		"max-height: 200px;\n" +
  		"overflow:scroll;\n" +
  		"overflow:auto;padding: 4px;\n" +
  		"border:3px solid #EEE;border-right:3px solid #EEE;\n" +
  		"border-bottom:3px solid #EEE;\n" +
  		"background:url(gradient.png) repeat-x fixed top left}\n" +
  		" div.box2 p{margin-top:0}\n" +
  		"div.Barra{\n" +
  		"margin-bottom: 1px;\n" +
  		"border: Solid 3px #FF0000;\n" +
  		"padding: 4px;\n" +
  		"height:30px;\n" +
  		"font-weight:bold;\n" +
  		"text-align:right\n" +
  		"}" +
  		"h1.B{\n" +
  		"size:20px;" +
  		"color:#ea5d00;" +
  		" }" +
  		"span.B{ color:#999898;}"+
  		"</style>\n" +
  		"<script language=\"JavaScript\" type=\"text/javascript\">\n" +
  		"function sleep(milliseconds) {\n" +
  		"var start = new Date().getTime();\n" +
  		"for (var i = 0; i < 1e7; i++) {\n" +
  		"if ((new Date().getTime() - start) > milliseconds){\n" +
  		"break;" +
  		"}" +
  		"}" +
  		"}" +
  		"function addItembBenchy(id,val) {\n" +
  		" if(val==0)val=1; "+
  		"var list = document.getElementById(\"bbEnchyBox\");\n" +
  				"var childNodeArray = document.getElementById(\"bbEnchyBox\").childNodes;\n" +
  						"var newNode =null;" +
  						"for (var i=0; i<childNodeArray.length; i++)\n" +
  						"{" +
  						" if (childNodeArray[i].id==id)" +
  						"{" +
  						" newNode=childNodeArray[i];break;" +
  						"}" +
  						"}" +
  						"if(newNode!=null)" +
  						"{" +
  						" newNode.setAttribute(\"class\", \"Barra\");\n" +
  								" var" +
  								"tmp_width=newNode.style.width.substring(0,newNode.style.width.length-2);\n" +
  								"var width = parseInt(tmp_width,10) + val;" +
  								"var setter_width=\"width:\"+width+\"px\";" +
  										"newNode.setAttribute(\"style\", setter_width);\n" +
  												" newNode.setAttribute(\"id\", id);" +
  												" newNode.innerHTML=\"id:\"+id+\"-T:\"+width+\"(ms)\";" +
  												"}else" +
  												"{" +
  												"var newNode = document.createElement(\"div\");\n" +
  														" newNode.setAttribute(\"class\", \"Barra\");" +
  														"var setter_width=\"width:\"+val+\"px\";\n" +
  																"newNode.setAttribute(\"style\", setter_width);" +
  																" newNode.setAttribute(\"id\", id);" +
  																"newNode.innerHTML=\"id:\"+id+\"-T:\"+val+\"(ms)\";" +
  																"list.insertBefore(newNode, list.firstChild);\n" +
  																"}" +
  																"}</script>" +
  																"<div class=\"box\">\n" +
  																"<h1 class=\"B\">Risultati BBenchy request time:" +
  																" <span class=\"B\"> "+time+"</span></h1>" +
  																"<div class=\"box2\" id=\"bbEnchyBox\">\n" +
  																"<!--------QUI LO SCRIPT INSERISCE I RISULTATI------->" +
  																"</div>" +
  																" </div>";
    }
    
    String myFile="";
    private Stack<Entry> myStack;
 
    public String getModFile()
    {
    	return myFile;
    }
    
    private int num=0;
    private int id=0;
    
    class Entry
    {
    	public Entry(int num, String id)
    	{
    		this.num=num;
    		this.id=id;
    	}
    	public int num;
    	public String id;
    }
    private int num_script=0;
      private String start_timer="var start_time = new Date(); ";
    public String event_name;
    //private String end_timer=" var end_time = new Date() - start_time;"+
      //      "if(end_time!=0)addItembBenchy("+e.id+",end_time); ";



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JSParser(java.io.Reader in) {
  
/*  Stuff enclosed in %init{ %init} is copied verbatim to the lexer
 *  class constructor, all the extra initialization you want to do should
 *  go here.  Don't remove or modify anything that was there initially. */

    // empty for now
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  JSParser(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { Entry popped=myStack.pop();
 			if(myStack.isEmpty()) 
	 		{	
	 			num--;
	 			myFile=myFile.concat(" var end_time = new Date() - start_time;"+
            "addItembBenchy('"+popped.id+"',end_time); "+yytext());
	 			yybegin(YYINITIAL);
	 		}
	 		else if(popped.num>myStack.peek().num) 
	 		{ 
	 				num--; 
	 				myFile=myFile.concat(" var end_time = new Date() - start_time;"+
            "addItembBenchy('"+popped.id+"',end_time); "+yytext());
	 				
	 		}
	 		else{
	 			myFile=myFile.concat(yytext());
	 		}
          }
        case 17: break;
        case 12: 
          { id++;
				num++;
				Entry e = new Entry(num,"unnamed_internal_func_"+id);
		
				myStack.push(e);
				myFile=myFile.concat(yytext()+start_timer);
          }
        case 18: break;
        case 5: 
          { myFile=myFile.concat(" var end_time = new Date() - start_time;"+
            "addItembBenchy('"+event_name+"',end_time); "+yytext()); yybegin(YYINITIAL);
          }
        case 19: break;
        case 6: 
          { myFile=myFile.concat(yytext()+" "+head);
          }
        case 20: break;
        case 2: 
          { myFile=myFile.concat(yytext()); curr_lineno++;
          }
        case 21: break;
        case 13: 
          { String name=yytext().substring(9);
	String def_name="";
	char[] v=name.toCharArray();
	int i=0;
	while(v[i]!='(')
	{
		def_name+=v[i];
		i++;
	}
				id++;
				num++;
				Entry e = new Entry(num,def_name+"_func_"+id);
				myStack=new Stack<Entry>(); 
				myStack.push(e);
				myFile=myFile.concat(yytext()+" "+start_timer);  
				yybegin(YYFUNC); 
				return new Symbol(curr_lineno);
          }
        case 22: break;
        case 1: 
          { myFile=myFile.concat(yytext());
          }
        case 23: break;
        case 15: 
          { String name=yytext().substring(9);
	String def_name="";
	char[] v=name.toCharArray();
	int i=0;
	while(v[i]!='(')
	{
		def_name+=v[i];
		i++;
	}
						 id++;
				num++;
				Entry e = new Entry(num,def_name+"_func_"+id);
				myStack=new Stack<Entry>(); 
				myStack.push(e);
				myFile=myFile.concat(yytext()+" "+start_timer);  
				yybegin(YYFUNC); 
						 return new Symbol(curr_lineno);
          }
        case 24: break;
        case 11: 
          { id++;
				num++;
				Entry e = new Entry(num,"unnamed_internal_func_"+id);
	
				myStack.push(e);
				myFile=myFile.concat(yytext()+start_timer);
          }
        case 25: break;
        case 7: 
          { event_name=yytext().substring(0,yytext().length()-2); myFile=myFile.concat(yytext()+" "+start_timer); yybegin(YYEVENT);
          }
        case 26: break;
        case 16: 
          { String name=yytext().substring(9);
			String def_name="";
			char[] v=name.toCharArray();
			int i=0;
			while(v[i]!='(')
			{
				def_name+=v[i];
				i++;
			}
				id++;
				num++;
				Entry e = new Entry(num,def_name+"_internal_func_"+id);
			
				myStack.push(e);
				myFile=myFile.concat(yytext()+" "+start_timer);
          }
        case 27: break;
        case 9: 
          { num_script++; 
						myFile=myFile.concat(" var end_time = new Date() - start_time;"+
						"addItembBenchy('script_tag_"+num_script+"',end_time); "+yytext());
          }
        case 28: break;
        case 14: 
          { String name=yytext().substring(9);
				String def_name="";
				char[] v=name.toCharArray();
				int i=0;
				while(v[i]!='(')
				{
					def_name+=v[i];
					i++;
				}
				id++;
				num++;
				Entry e = new Entry(num,def_name+"_internal_func_"+id);
			
				myStack.push(e);
				myFile=myFile.concat(yytext()+start_timer);
          }
        case 29: break;
        case 10: 
          { id++;
				num++;
				Entry e = new Entry(num,"unnamed_func_"+id);
				myStack=new Stack<Entry>(); 
				myStack.push(e);
				myFile=myFile.concat(yytext()+" "+start_timer);  
				yybegin(YYFUNC); 
				return new Symbol(curr_lineno);
          }
        case 30: break;
        case 8: 
          { myFile=myFile.concat(yytext()+" "+start_timer);
          }
        case 31: break;
        case 3: 
          { myFile=myFile.concat(yytext()); 

				Entry e = new Entry(num,""+id);
			
				myStack.push(e);
          }
        case 32: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 
/*  Stuff enclosed in %eofval{ %eofval} specifies java code that is
 *  executed when end-of-file is reached.  If you use multiple lexical
 *  states and want to do something special if an EOF is encountered in
 *  one of those states, place your code in the switch statement.
 *  Ultimately, you should return the EOF symbol, or your lexer won't
 *  work.  */

    switch(zzLexicalState) {
    case YYINITIAL:
	/* nothing special to do in the initial state */
	break;
	/* If necessary, add code for other states here, e.g:
	   case COMMENT:
	   ...
	   break;
	*/
    }
    return new Symbol(-1999);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
